#!/bin/bash
#
# Usage:
#   1) Save this file as ~/.bash/prompt
#   2) Add the following line to the end of your ~/.bash_rc, ~/.bash_profile or ~/.profile:
#           . $HOME/.bash/prompt
#
# Adapted from:
#   https://gist.github.com/insin/1425703
#   https://github.com/techbelly/dotfiles/blob/master/bash/prompt

         RED="\[\033[0;31m\]"
   LIGHT_RED="\[\033[1;31m\]"
       GREEN="\[\033[0;32m\]"
 LIGHT_GREEN="\[\033[1;32m\]"
      YELLOW="\[\033[0;33m\]"
LIGHT_YELLOW="\[\033[1;33m\]"
        BLUE="\[\033[0;34m\]"
  LIGHT_BLUE="\[\033[1;34m\]"
        GRAY="\[\033[1;30m\]"
  LIGHT_GRAY="\[\033[0;37m\]"
       WHITE="\[\033[1;37m\]"
  COLOR_NONE="\[\033[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository() {
    git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch() {
    # Capture the output of the "git status" command.
    git_status="$(git status 2> /dev/null)"

    # Set color based on clean/staged/dirty.
    if [[ ${git_status} =~ "working directory clean" ]]; then
        state="${LIGHT_GREEN}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${LIGHT_YELLOW}"
    else
        state="${LIGHT_RED}"
    fi

    # Set arrow icon based on status against remote.
    remote_pattern="Your branch is (.*) of"
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            remote="↑"
        else
            remote="↓"
        fi
    else
        remote=""
    fi
    diverge_pattern="Your branch and (.*) have diverged"
    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote="↕"
    fi

    # Get the name of the branch.
    branch_pattern="On branch ([^${IFS}]*)"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    fi

    # Set the final branch string.
    BRANCH="${state}(${branch})${remote}${COLOR_NONE} "
}

# Set the prompt.
function set_prompt() {
    previous_return_value=$?;

    if [ -n "$VIRTUAL_ENV" ]; then
        venv="(`basename \"$VIRTUAL_ENV\"`)"
    else
        venv=""
    fi

    if [ -n "$SSH_CLIENT" ]; then
        prompt="${TITLEBAR}\u@\h ${LIGHT_GRAY}\w${COLOR_NONE}"
    else
        prompt="${TITLEBAR}${LIGHT_GRAY}\w${COLOR_NONE}"
    fi

    if is_git_repository; then
        set_git_branch
    else
        BRANCH=""
    fi

    if [ $previous_return_value == 0 ]; then
        PS1="${venv}${debian_chroot:+($debian_chroot)}${LIGHT_GREEN}∆ ${COLOR_NONE}${prompt} ${BRANCH}${LIGHT_GREEN}\$${COLOR_NONE} "
    else
        PS1="${venv}${debian_chroot:+($debian_chroot)}${LIGHT_RED}∇ ${COLOR_NONE}${prompt} ${BRANCH}${LIGHT_RED}\$${COLOR_NONE} "
    fi
}

PROMPT_COMMAND=set_prompt
